// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                Int       @id @default(autoincrement())
  name              String
  cpf               String    @unique
  cnh               String?   @unique
  cnhCategory       String?
  cnhExpiration     DateTime?
  phone             String?
  address           String?
  position          String?
  toxicologicalDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("drivers")
}

model Vehicle {
  id                Int           @id @default(autoincrement())
  plate             String        @unique
  model             String
  type              String
  manufacturingYear Int?
  modelYear         Int?
  observation       String?
  color             String?
  fuelType          String?
  mileage           Float?
  utility           String?
  classification    Int?
  registration      String
  chassi            String?
  renavam           String?
  fleet             Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Alerts            Alerts[]
  Tire              Tire[]
  VehicleTire       VehicleTire[]

  @@map("vehicles")
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  invoiceDate DateTime
  invoiceId   Int
  issuer      String
  date        DateTime
  plate       String
  description String
  quantity    Float
  value       Float
  totalCost   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]

  @@map("maintenances")
}

model Review {
  id            Int      @id @default(autoincrement())
  maintenanceId Int      @unique
  type          String // Ex: "Revisão 10.000 km"
  currentKm     Int?
  nextReviewKm  Int?
  createdAt     DateTime @default(now())

  Maintenance Maintenance @relation(fields: [maintenanceId], references: [id])
}

model Fuel {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  issuer      String
  invoiceDate DateTime
  date        DateTime
  plate       String
  kilometers  Int
  fuelType    String
  quantity    Float
  unitCost    Float
  totalCost   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fuels")
}

model Alerts {
  id          Int       @id @default(autoincrement())
  vehicleId   Int
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  type        String
  description String?
  value       Float?
  doneDate    DateTime?
  kmAlert     Int
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("alerts")
}

model Tire {
  id            Int       @id @default(autoincrement())
  fireId        Int       @unique
  retreadNumber Int       @default(0)
  grooveDepth   Float?
  purchaseDate  DateTime?
  brand         String
  model         String?
  measure       String?
  value         Float?
  currentKm     Float?
  status        String    @default("IN_STOCK") // Status: IN_STOCK, IN_USE, DISCARDED
  pressure      Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  VehicleTire VehicleTire[]
  Vehicle     Vehicle?      @relation(fields: [vehicleId], references: [id])
  vehicleId   Int?
}

model VehicleTire {
  id     Int  @id @default(autoincrement())
  tireId Int
  tire   Tire @relation(fields: [tireId], references: [id])

  vehicleId Int
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  axlePosition String
  mountKm      Int // KM do veículo no momento da montagem

  mountDate   DateTime  @default(now()) // Data da montagem
  unmountDate DateTime? // Data da desmontagem (opcional)
  unmountKm   Int? // KM do veículo no momento da desmontagem (opcional)

  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
